[{"meta":{"section":"introduction","title":"Introduction","sequence":0},"html":"<a name=\"introduction\"></a><h1>Introduction</h1>\n<p>Vorlon.JS is a remote debugging and testing tool for JavaScript. It helps you remotely load inspect, test and debug JavaScript code running on any device with a web browser: whether it's a games console, mobile device or fridge.</p>\n<p>Vorlon.JS itself is a small web server you can run from your local machine, or install on a server for your team to access, that serves the Vorlon.JS dashboard and communicates with your remote devices. Installing the Vorlon.JS client in your web site or application is as easy as adding a single script tag.</p>\n<p>Vorlon.JS can be extended with plugins which may add features to both the client and the dashboard, for example: feature detection, logging, and exception tracking.</p>\n","headers":[{"depth":"1","title":"Introduction","slug":"introduction"}]},{"meta":{"section":"installation","title":"Installing Vorlon.JS","sequence":1},"html":"<a name=\"installing-vorlonjs\"></a><h1>Installing Vorlon.JS</h1>\n<a name=\"vorlonjs-server\"></a><h2 id=\"vorlon-js-server\">Vorlon.JS Server</h2>\n<p>To get started using Vorlon.JS you will need to install it from npm:</p>\n<pre><code>$ npm i -g vorlon\n</code></pre><p>Once Vorlon.JS is done installing, you can now run the server:</p>\n<pre><code>$ vorlon\nThe Vorlon server is running\n</code></pre><p>With the server running, open <a href=\"http://localhost:1337\">http://localhost:1337</a> in your browser to see the Vorlon.JS dashboard.</p>\n<a name=\"vorlonjs-client\"></a><h2 id=\"vorlon-js-client\">Vorlon.JS Client</h2>\n<p>Before you can start debugging your app you have to enable it to communicate to the Vorlon.JS Server by adding this script tag to your applicationâ€™s html:</p>\n<pre><code>&lt;script src=\"http://localhost:1337/vorlon.js\"&gt;&lt;/script&gt;\n</code></pre><p>You can also open the <a href=\"http://cdn.rawgit.com/MicrosoftDX/Vorlonjs/master/Plugins/samples/index.html\">sample page</a> to test that your dashboard is working. You should see the client appear in your dashboard when you open that page.</p>\n<a name=\"vorlonjs-client-advanced-topics\"></a><h2 id=\"vorlon-js-client-advanced-topics\">Vorlon.JS Client advanced topics</h2>\n<p>If you want to get an unminified version of the plugins on your web page, you can use the following script tag:</p>\n<pre><code>&lt;script src=\"http://localhost:1337/vorlon.max.js\"&gt;&lt;/script&gt;\n</code></pre><p>You can have more control on the moment the client side part is starting by using the autostartdisabled version:</p>\n<pre><code>&lt;script src=\"http://localhost:1337/vorlon.autostartdisabled.js\"&gt;&lt;/script&gt;\n</code></pre><p>which also exist with the unminified version of the code:</p>\n<pre><code>&lt;script src=\"http://localhost:1337/vorlon.max.autostartdisabled.js\"&gt;&lt;/script&gt;\n</code></pre><p>Once this is done, you can start the vorlon client and connect it to the dashbard of you choice using the session id you want:</p>\n<pre><code>VORLON.Core.Start(\"http://localhost:1337\", \"default\");\n</code></pre><a name=\"vorlonjs-server-advanced-topics\"></a><h2 id=\"vorlon-js-server-advanced-topics\">Vorlon.JS Server advanced topics</h2>\n<p>If you do not want to use a specific plugin in your dashboard and disable it also on the client part, you can use the catalog.json file on the server.\nTo be able to do this, you need to use Vorlon.js downloaded and installed from the GitHub repository. You can also modify the package downloaded from npm but this is not recommended.</p>\n<p>The file is located on the following folder :</p>\n<pre><code>Server/public/catalog.json\n</code></pre><p>By default, it looks like this :</p>\n<pre><code>{\n    \"includeSocketIO\": true,\n    \"plugins\": [\n        { \"id\": \"CONSOLE\", \"name\": \"Interactive Console\", \"panel\": \"bottom\", \"foldername\" : \"interactiveConsole\"},\n        { \"id\": \"DOM\", \"name\": \"Dom Explorer\", \"panel\": \"top\", \"foldername\" : \"domExplorer\" },\n        { \"id\": \"MODERNIZR\", \"name\": \"Modernizr\",\"panel\": \"bottom\", \"foldername\" : \"modernizrReport\" },\n        { \"id\" : \"OBJEXPLORER\", \"name\" : \"Obj. Explorer\",\"panel\": \"top\", \"foldername\" : \"objectExplorer\" }\n    ]\n}\n</code></pre><p>It is obviously using the JSON (JavaScript Simple Object Notation) format and is easy to understand: each line in the \"plugins\" array represents a plugin.</p>\n<p>For instance, you can change the folder where the plugin is installed. This folder has to be located under:</p>\n<pre><code>Server/public/vorlon/plugins\n</code></pre><p>By convention, this name needs to be the same as the JavaScript file for the plugin for either the max file:</p>\n<pre><code>{FOLDERNAME}.js\n</code></pre><p>and the min version:</p>\n<pre><code>{FOLDERNAME}.min.js\n</code></pre><p>You can also choose in which panel the plugin should be displayed using the \"panel\" property. It can be either \"bottom\" or \"top\".</p>\n<p>You can add and remove plugins here. \nIt will impact the dashbard by not displaying a removed plugin and also the client JavaScript file which is sent to the client website.</p>\n<p>We also added the option to NOT automatically include socket.io in the script returned to the client. You can disable socket.io embedding by setting:</p>\n<pre><code>\"includeSocketIO\": false\n</code></pre>","headers":[{"depth":"1","title":"Installing Vorlon.JS","slug":"installing-vorlonjs"},{"depth":"2","title":"Vorlon.JS Server","slug":"vorlonjs-server"},{"depth":"2","title":"Vorlon.JS Client","slug":"vorlonjs-client"},{"depth":"2","title":"Vorlon.JS Client advanced topics","slug":"vorlonjs-client-advanced-topics"},{"depth":"2","title":"Vorlon.JS Server advanced topics","slug":"vorlonjs-server-advanced-topics"}]},{"meta":{"section":"dashboard","title":"Vorlon.JS Dashboard","sequence":2},"html":"<a name=\"vorlonjs-dashboard\"></a><h1>Vorlon.JS Dashboard</h1>\n<p>The Vorlon.JS dashboard is designed to help debug and test remote JavaScript applications and the UI is geared towards that goal. The dashboard has two major sections, the client summary view and the plugin view.</p>\n<p>The client summary view shows what the current session and client id are currently active and a list of available clients that you can work with. The <code>Identify a client</code> button quickly allows you to see which remote client browser tab or window you are currently working with.</p>\n<p>The plugin view is where all the action is! The console is the only plugin that has a fixed location at the bottom of the dashboard and all other plugins will present themselves across the top as tabs.</p>\n","headers":[{"depth":"1","title":"Vorlon.JS Dashboard","slug":"vorlonjs-dashboard"}]},{"meta":{"section":"core-plugins","title":"Core Plugins","sequence":3},"html":"<a name=\"core-plugins\"></a><h1>Core Plugins</h1>\n<a name=\"console\"></a><h2 id=\"console\">Console</h2>\n<a name=\"logging\"></a><h3 id=\"logging\">Logging</h3>\n<p>The console tab will stream console messages from the client to the dashboard that you can use for debugging. Anything logged with <code>console.log()</code>, <code>console.warn()</code> or <code>console.error()</code> will appear in the dashboard.</p>\n<a name=\"interactivity\"></a><h3 id=\"interactivity\">Interactivity</h3>\n<p>You can also interact with the remote webpage by typing code into the input. Code entered will be evaluated in the context of the page.</p>\n<a name=\"dom-explorer\"></a><h2 id=\"dom-explorer\">DOM Explorer</h2>\n<p>The DOM explorer shows you the dom of the remote webpage. You can inspect the DOM, clicking on nodes will highlight them in the host webpage, and if you select one you can also view and modify its css properties.</p>\n<a name=\"modernizr\"></a><h2 id=\"modernizr\">Modernizr</h2>\n<p>The Modernizr tab will show you the supported browser features as reported by <a href=\"http://modernizr.com/\">Modernizr</a>. You can use this to determine what features are actually available. This might be particularly useful on unusual mobile devices, or things like games consoles. You can use the search filter to select only specific features.</p>\n<a name=\"object-explorer\"></a><h2 id=\"object-explorer\">Object Explorer</h2>\n<p>The Object explorer tab will show you all JavaScript variable living on the remote page. You can click on object to see inner properties.</p>\n","headers":[{"depth":"1","title":"Core Plugins","slug":"core-plugins"},{"depth":"2","title":"Console","slug":"console"},{"depth":"3","title":"Logging","slug":"logging"},{"depth":"3","title":"Interactivity","slug":"interactivity"},{"depth":"2","title":"DOM Explorer","slug":"dom-explorer"},{"depth":"2","title":"Modernizr","slug":"modernizr"},{"depth":"2","title":"Object Explorer","slug":"object-explorer"}]},{"meta":{"section":"creating-plugins","title":"Creating Plugins","sequence":4},"html":"<a name=\"creating-plugins\"></a><h1>Creating Plugins</h1>\n<p>Vorlon.JS has been designed so that you can extend the dashboard and client application easily by writing or installing additional plugins. These can add extra panes to the dashboard which can communicate bi-directionally with the client application. The console, dom inspector and modernizr panes that come bundled with Vorlon.JS are all plugins themselves.</p>\n<a name=\"writing-plugins\"></a><h2 id=\"writing-plugins\">Writing Plugins</h2>\n<a name=\"running-vorlonjs-from-source\"></a><h3 id=\"running-vorlon-js-from-source\">Running Vorlon.JS from source</h3>\n<p>To write plugins, you currently need to clone and run Vorlon.JS from source.</p>\n<p>These commands will clone the repo, install dependencies, and run the VorlonJS server from source:</p>\n<pre><code>git clone https://github.com/MicrosoftDX/Vorlonjs.git\ncd Vorlonjs\nnpm install\nnpm start\n</code></pre><p>For further documentation on developing on Vorlon.JS, check the <a href=\"https://github.com/MicrosoftDX/Vorlonjs/blob/master/README.md\">full readme</a> in the repo.</p>\n<a name=\"sample-plugin\"></a><h3 id=\"sample-plugin\">Sample Plugin</h3>\n<p>A Vorlon.JS plugin is a single Typescript class, that will be loaded in both the client and dashboard. It should extend from the <a href=\"https://github.com/MicrosoftDX/Vorlonjs/blob/master/microsoft/Plugins/Vorlon/vorlon.plugin.ts\">Vorlon.Plugin class</a>. It may also load <code>html</code> and <code>css</code> into the dashboard to define a panel. You can then write code for both the dashboard and client that can communicate bidirectionally to create whatever features you need.</p>\n<p>To make it easy to get started, weâ€™ve created a sample plugin. This adds an input field to the dashboard, that, when you type something and hit return, sends the message to your client browser, which will reverse the string and send it back, to be rendered in the dashboard. Itâ€™s just a simple example to show you how to create and communicate in a plugin. You should <a href=\"https://github.com/MicrosoftDX/Vorlonjs/blob/master/Plugins/Vorlon/plugins/sample/README.md\">check the sample pluginâ€™s readme</a> for information about how to enable it, and then <a href=\"https://github.com/MicrosoftDX/Vorlonjs/blob/master/Plugins/Vorlon/plugins/sample/sample.ts\">read the sample pluginâ€™s code</a> to see how you might modify it for your own needs.</p>\n<a name=\"installing-plugins\"></a><h2 id=\"installing-plugins\">Installing Plugins</h2>\n<p>We are still working on making it easy to install and run third-party plugins for Vorlon.JS. At the moment, you will need to write and compile plugins in a checked out version of vorlon as above, but we want to make it really easy for you to publish and use plugins with Vorlon.JS. If you have ideas on how we can improve this <a href=\"https://github.com/MicrosoftDX/Vorlonjs/issues\">file an issue on github</a>.</p>\n<p>In the meantime, if you've developed a plugin that you think could go in Vorlon.JS core, <a href=\"https://github.com/MicrosoftDX/Vorlonjs\">submit a pull request</a>.</p>\n<a name=\"useful-reading\"></a><h2 id=\"useful-reading\">Useful reading</h2>\n<p> <a href=\"http://blogs.msdn.com/b/emargraff/archive/2015/06/01/how-to-create-a-vorlon-js-plugin.aspx\">How to create a plugin</a> by Etienne Margraff</p>\n","headers":[{"depth":"1","title":"Creating Plugins","slug":"creating-plugins"},{"depth":"2","title":"Writing Plugins","slug":"writing-plugins"},{"depth":"3","title":"Running Vorlon.JS from source","slug":"running-vorlonjs-from-source"},{"depth":"3","title":"Sample Plugin","slug":"sample-plugin"},{"depth":"2","title":"Installing Plugins","slug":"installing-plugins"},{"depth":"2","title":"Useful reading","slug":"useful-reading"}]},{"meta":{"section":"contributing","title":"Contributing","sequence":5},"html":"<a name=\"contributing\"></a><h1>Contributing</h1>\n<p>Vorlon.JS is a fully open source project. It is licensed with the <a href=\"https://github.com/MicrosoftDX/Vorlonjs/blob/master/LICENSE\">MIT License</a>.</p>\n<p>For information on how to develop on the Vorlon.JS server/client itself, and how to contribute, please read the <a href=\"https://github.com/MicrosoftDX/Vorlonjs/blob/master/README.md\">README</a> and <a href=\"https://github.com/MicrosoftDX/Vorlonjs/blob/master/CONTRIBUTING.md\">CONTRIBUTING</a> files over at the <a href=\"https://github.com/MicrosoftDX/Vorlonjs\">github repo</a>.</p>\n","headers":[{"depth":"1","title":"Contributing","slug":"contributing"}]}]